!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
APP_ADV_INTERVAL	main.c	95;"	d	file:
APP_ADV_TIMEOUT_IN_SECONDS	main.c	96;"	d	file:
APP_BLE_CONN_CFG_TAG	main.c	84;"	d	file:
APP_BLE_OBSERVER_PRIO	main.c	93;"	d	file:
APP_FEATURE_NOT_SUPPORTED	main.c	86;"	d	file:
CONN_SUP_TIMEOUT	main.c	105;"	d	file:
DEAD_BEEF	main.c	117;"	d	file:
DEVICE_NAME	main.c	89;"	d	file:
FIRST_CONN_PARAMS_UPDATE_DELAY	main.c	108;"	d	file:
MAX_CONN_INTERVAL	main.c	101;"	d	file:
MAX_CONN_PARAMS_UPDATE_COUNT	main.c	114;"	d	file:
MIN_CONN_INTERVAL	main.c	98;"	d	file:
NEXT_CONN_PARAMS_UPDATE_DELAY	main.c	111;"	d	file:
NUS_SERVICE_UUID_TYPE	main.c	90;"	d	file:
PowerSystem	main.c	/^static void PowerSystem(uint8_t OnOff)$/;"	f	file:
SLAVE_LATENCY	main.c	104;"	d	file:
UART_RX_BUF_SIZE	main.c	121;"	d	file:
UART_TX_BUF_SIZE	main.c	120;"	d	file:
advertising_init	main.c	/^static void advertising_init(void)$/;"	f	file:
assert_nrf_callback	main.c	/^void assert_nrf_callback(uint16_t line_num, const uint8_t* p_file_name)$/;"	f
ble_evt_handler	main.c	/^static void ble_evt_handler(ble_evt_t const* p_ble_evt, void* p_context)$/;"	f	file:
ble_stack_init	main.c	/^static void ble_stack_init(void)$/;"	f	file:
bsp_event_handler	main.c	/^void bsp_event_handler(bsp_event_t event)$/;"	f
conn_params_error_handler	main.c	/^static void conn_params_error_handler(uint32_t nrf_error)$/;"	f	file:
conn_params_init	main.c	/^static void conn_params_init(void)$/;"	f	file:
gap_params_init	main.c	/^static void gap_params_init(void)$/;"	f	file:
gatt_evt_handler	main.c	/^void gatt_evt_handler(nrf_ble_gatt_t* p_gatt, nrf_ble_gatt_evt_t const* p_evt)$/;"	f
gatt_init	main.c	/^void gatt_init(void)$/;"	f
log_init	main.c	/^static void log_init(void)$/;"	f	file:
m_adv_uuids	main.c	/^static ble_uuid_t m_adv_uuids[] = \/**< Universally unique service identifier. *\/$/;"	v	file:
m_advertising	main.c	/^BLE_ADVERTISING_DEF(m_advertising); \/**< Advertising module instance. *\/$/;"	v
m_ble_nus_max_data_len	main.c	/^static uint16_t m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT -$/;"	v	file:
m_conn_handle	main.c	/^static uint16_t m_conn_handle = BLE_CONN_HANDLE_INVALID; \/**< Handle of the current connection. *\/$/;"	v	file:
m_gatt	main.c	/^NRF_BLE_GATT_DEF(m_gatt);           \/**< GATT module instance. *\/$/;"	v
m_nus	main.c	/^BLE_NUS_DEF(m_nus);                 \/**< BLE NUS service instance. *\/$/;"	v
main	main.c	/^int main(void)$/;"	f
nus_data_handler	main.c	/^static void nus_data_handler(ble_nus_evt_t* p_evt)$/;"	f	file:
on_adv_evt	main.c	/^static void on_adv_evt(ble_adv_evt_t ble_adv_evt)$/;"	f	file:
on_conn_params_evt	main.c	/^static void on_conn_params_evt(ble_conn_params_evt_t* p_evt)$/;"	f	file:
services_init	main.c	/^static void services_init(void)$/;"	f	file:
sleep_mode_enter	main.c	/^static void sleep_mode_enter(void)$/;"	f	file:
uart_event_handle	main.c	/^void uart_event_handle(app_uart_evt_t* p_event)$/;"	f
