{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"On",
				"OnOff\tuint8_t OnOff"
			],
			[
				"uint",
				"uint8_t\tuint8_t"
			],
			[
				"sho",
				"showStrip\tint showStrip()"
			],
			[
				"in",
				"include"
			],
			[
				"Ada",
				"Adafruit_NeoPixel_getPixelColor\tuint32_t Adafruit_NeoPixel_getPixelColor(uint16_t n)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/**\n * Copyright (c) 2014 - 2017, Nordic Semiconductor ASA\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form, except as embedded into a Nordic\n *    Semiconductor ASA integrated circuit in a product or a software update for\n *    such product, must reproduce the above copyright notice, this list of\n *    conditions and the following disclaimer in the documentation and/or other\n *    materials provided with the distribution.\n *\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\n *    contributors may be used to endorse or promote products derived from this\n *    software without specific prior written permission.\n *\n * 4. This software, with or without modification, must only be used with a\n *    Nordic Semiconductor ASA integrated circuit.\n *\n * 5. Any software provided in binary form under this license must not be reverse\n *    engineered, decompiled, modified and/or disassembled.\n *\n * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA \"AS IS\" AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\n/** @file\n *\n * @defgroup ble_sdk_uart_over_ble_main main.c\n * @{\n * @ingroup  ble_sdk_app_nus_eval\n * @brief    UART over BLE application main file.\n *\n * This file contains the source code for a sample application that uses the Nordic UART service.\n * This application uses the @ref srvlib_conn_params module.\n */\n\n#include \"app_timer.h\"\n#include \"app_uart.h\"\n#include \"app_util_platform.h\"\n#include \"ble_advdata.h\"\n#include \"ble_advertising.h\"\n#include \"ble_conn_params.h\"\n#include \"ble_hci.h\"\n#include \"ble_nus.h\"\n#include \"bsp_btn_ble.h\"\n#include \"nordic_common.h\"\n#include \"nrf.h\"\n#include \"nrf_ble_gatt.h\"\n#include \"nrf_sdh.h\"\n#include \"nrf_sdh_ble.h\"\n#include \"nrf_sdh_soc.h\"\n#include <stdint.h>\n#include <string.h>\n\n#if defined(UART_PRESENT)\n#include \"nrf_uart.h\"\n#endif\n#if defined(UARTE_PRESENT)\n#include \"nrf_uarte.h\"\n#endif\n\n#include \"nrf_log.h\"\n#include \"nrf_log_ctrl.h\"\n#include \"nrf_log_default_backends.h\"\n\n// debug\n#include \"project.h\"\n// debug\n\n#define APP_BLE_CONN_CFG_TAG 1 /**< A tag identifying the SoftDevice BLE configuration. */\n\n#define APP_FEATURE_NOT_SUPPORTED \\\n    BLE_GATT_STATUS_ATTERR_APP_BEGIN + 2 /**< Reply when unsupported features are requested. */\n\n#define DEVICE_NAME \"Nordic_UART\" /**< Name of device. Will be included in the advertising data. */\n#define NUS_SERVICE_UUID_TYPE \\\n    BLE_UUID_TYPE_VENDOR_BEGIN /**< UUID type for the Nordic UART Service (vendor specific). */\n\n#define APP_BLE_OBSERVER_PRIO 3 /**< Application's BLE observer priority. You shouldn't need to modify this value. */\n\n#define APP_ADV_INTERVAL 64 /**< The advertising interval (in units of 0.625 ms. This value corresponds to 40 ms). */\n#define APP_ADV_TIMEOUT_IN_SECONDS 180 /**< The advertising timeout (in units of seconds). */\n\n#define MIN_CONN_INTERVAL \\\n    MSEC_TO_UNITS(20,     \\\n        UNIT_1_25_MS) /**< Minimum acceptable connection interval (20 ms), Connection interval uses 1.25 ms units. */\n#define MAX_CONN_INTERVAL \\\n    MSEC_TO_UNITS(75,     \\\n        UNIT_1_25_MS)   /**< Maximum acceptable connection interval (75 ms), Connection interval uses 1.25 ms units. */\n#define SLAVE_LATENCY 0 /**< Slave latency. */\n#define CONN_SUP_TIMEOUT \\\n    MSEC_TO_UNITS(       \\\n        4000, UNIT_10_MS) /**< Connection supervisory timeout (4 seconds), Supervision Timeout uses 10 ms units. */\n#define FIRST_CONN_PARAMS_UPDATE_DELAY                                                                     \\\n    APP_TIMER_TICKS(5000) /**< Time from initiating event (connect or start of notification) to first time \\\n                             sd_ble_gap_conn_param_update is called (5 seconds). */\n#define NEXT_CONN_PARAMS_UPDATE_DELAY \\\n    APP_TIMER_TICKS(                  \\\n        30000) /**< Time between each call to sd_ble_gap_conn_param_update after the first call (30 seconds). */\n#define MAX_CONN_PARAMS_UPDATE_COUNT 3 /**< Number of attempts before giving up the connection parameter negotiation. \\\n                                          */\n\n#define DEAD_BEEF \\\n    0xDEADBEEF /**< Value used as error code on stack dump, can be used to identify stack location on stack unwind. */\n\n#define UART_TX_BUF_SIZE 256 /**< UART TX buffer size. */\n#define UART_RX_BUF_SIZE 256 /**< UART RX buffer size. */\n\nBLE_NUS_DEF(m_nus);                 /**< BLE NUS service instance. */\nNRF_BLE_GATT_DEF(m_gatt);           /**< GATT module instance. */\nBLE_ADVERTISING_DEF(m_advertising); /**< Advertising module instance. */\n\nstatic uint16_t m_conn_handle = BLE_CONN_HANDLE_INVALID; /**< Handle of the current connection. */\nstatic uint16_t m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT -\n        3; /**< Maximum length of data (in bytes) that can be transmitted to the peer by the Nordic UART service module. */\nstatic ble_uuid_t m_adv_uuids[] = /**< Universally unique service identifier. */\n{ { BLE_UUID_NUS_SERVICE, NUS_SERVICE_UUID_TYPE } };\n\n/**@brief Function for assert macro callback.\n *\n * @details This function will be called in case of an assert in the SoftDevice.\n *\n * @warning This handler is an example only and does not fit a final product. You need to analyse\n *          how your product is supposed to react in case of Assert.\n * @warning On assert from the SoftDevice, the system can only recover on reset.\n *\n * @param[in] line_num    Line number of the failing ASSERT call.\n * @param[in] p_file_name File name of the failing ASSERT call.\n */\nvoid assert_nrf_callback(uint16_t line_num, const uint8_t* p_file_name)\n{\n    app_error_handler(DEAD_BEEF, line_num, p_file_name);\n}\n\n/**@brief Function for the GAP initialization.\n *\n * @details This function will set up all the necessary GAP (Generic Access Profile) parameters of\n *          the device. It also sets the permissions and appearance.\n */\nstatic void gap_params_init(void)\n{\n    uint32_t err_code;\n    ble_gap_conn_params_t gap_conn_params;\n    ble_gap_conn_sec_mode_t sec_mode;\n\n    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);\n\n    err_code = sd_ble_gap_device_name_set(&sec_mode, (const uint8_t*)DEVICE_NAME, strlen(DEVICE_NAME));\n    APP_ERROR_CHECK(err_code);\n\n    memset(&gap_conn_params, 0, sizeof(gap_conn_params));\n\n    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;\n    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;\n    gap_conn_params.slave_latency = SLAVE_LATENCY;\n    gap_conn_params.conn_sup_timeout = CONN_SUP_TIMEOUT;\n\n    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);\n    APP_ERROR_CHECK(err_code);\n}\n\n/**@brief Function for handling the data from the Nordic UART Service.\n *\n * @details This function will process the data received from the Nordic UART BLE Service and send\n *          it to the UART module.\n *\n * @param[in] p_nus    Nordic UART Service structure.\n * @param[in] p_data   Data to be send to UART module.\n * @param[in] length   Length of the data.\n */\n/**@snippet [Handling the data received over BLE] */\nstatic void nus_data_handler(ble_nus_evt_t* p_evt)\n{\n\n    if (p_evt->type == BLE_NUS_EVT_RX_DATA) {\n        uint32_t err_code;\n\n        NRF_LOG_DEBUG(\"Received data from BLE NUS. Writing data on UART.\");\n        NRF_LOG_HEXDUMP_DEBUG(p_evt->params.rx_data.p_data, p_evt->params.rx_data.length);\n\n        for (uint32_t i = 0; i < p_evt->params.rx_data.length; i++) {\n            do {\n                err_code = app_uart_put(p_evt->params.rx_data.p_data[i]);\n                if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_BUSY)) {\n                    NRF_LOG_ERROR(\"Failed receiving NUS message. Error 0x%x. \", err_code);\n                    APP_ERROR_CHECK(err_code);\n                }\n            } while (err_code == NRF_ERROR_BUSY);\n        }\n        if (p_evt->params.rx_data.p_data[p_evt->params.rx_data.length - 1] == '\\r') {\n            while (app_uart_put('\\n') == NRF_ERROR_BUSY)\n                ;\n        }\n    }\n}\n/**@snippet [Handling the data received over BLE] */\n\n/**@brief Function for initializing services that will be used by the application.\n */\nstatic void services_init(void)\n{\n    uint32_t err_code;\n    ble_nus_init_t nus_init;\n\n    memset(&nus_init, 0, sizeof(nus_init));\n\n    nus_init.data_handler = nus_data_handler;\n\n    err_code = ble_nus_init(&m_nus, &nus_init);\n    APP_ERROR_CHECK(err_code);\n}\n\n/**@brief Function for handling an event from the Connection Parameters Module.\n *\n * @details This function will be called for all events in the Connection Parameters Module\n *          which are passed to the application.\n *\n * @note All this function does is to disconnect. This could have been done by simply setting\n *       the disconnect_on_fail config parameter, but instead we use the event handler\n *       mechanism to demonstrate its use.\n *\n * @param[in] p_evt  Event received from the Connection Parameters Module.\n */\nstatic void on_conn_params_evt(ble_conn_params_evt_t* p_evt)\n{\n    uint32_t err_code;\n\n    if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED) {\n        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);\n        APP_ERROR_CHECK(err_code);\n    }\n}\n\n/**@brief Function for handling errors from the Connection Parameters module.\n *\n * @param[in] nrf_error  Error code containing information about what went wrong.\n */\nstatic void conn_params_error_handler(uint32_t nrf_error)\n{\n    APP_ERROR_HANDLER(nrf_error);\n}\n\n/**@brief Function for initializing the Connection Parameters module.\n */\nstatic void conn_params_init(void)\n{\n    uint32_t err_code;\n    ble_conn_params_init_t cp_init;\n\n    memset(&cp_init, 0, sizeof(cp_init));\n\n    cp_init.p_conn_params = NULL;\n    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;\n    cp_init.next_conn_params_update_delay = NEXT_CONN_PARAMS_UPDATE_DELAY;\n    cp_init.max_conn_params_update_count = MAX_CONN_PARAMS_UPDATE_COUNT;\n    cp_init.start_on_notify_cccd_handle = BLE_GATT_HANDLE_INVALID;\n    cp_init.disconnect_on_fail = false;\n    cp_init.evt_handler = on_conn_params_evt;\n    cp_init.error_handler = conn_params_error_handler;\n\n    err_code = ble_conn_params_init(&cp_init);\n    APP_ERROR_CHECK(err_code);\n}\n\n/**@brief Function for putting the chip into sleep mode.\n *\n * @note This function will not return.\n */\nstatic void sleep_mode_enter(void)\n{\n    uint32_t err_code = bsp_indication_set(BSP_INDICATE_IDLE);\n    APP_ERROR_CHECK(err_code);\n\n    // Prepare wakeup buttons.\n    err_code = bsp_btn_ble_sleep_mode_prepare();\n    APP_ERROR_CHECK(err_code);\n\n    // Go to system-off mode (this function will not return; wakeup will cause a reset).\n    err_code = sd_power_system_off();\n    APP_ERROR_CHECK(err_code);\n}\n\n/**@brief Function for handling advertising events.\n *\n * @details This function will be called for advertising events which are passed to the application.\n *\n * @param[in] ble_adv_evt  Advertising event.\n */\nstatic void on_adv_evt(ble_adv_evt_t ble_adv_evt)\n{\n    uint32_t err_code;\n\n    switch (ble_adv_evt) {\n    case BLE_ADV_EVT_FAST:\n        err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING);\n        APP_ERROR_CHECK(err_code);\n        break;\n    case BLE_ADV_EVT_IDLE:\n        sleep_mode_enter();\n        break;\n    default:\n        break;\n    }\n}\n\n/**@brief Function for handling BLE events.\n *\n * @param[in]   p_ble_evt   Bluetooth stack event.\n * @param[in]   p_context   Unused.\n */\nstatic void ble_evt_handler(ble_evt_t const* p_ble_evt, void* p_context)\n{\n    uint32_t err_code;\n\n    switch (p_ble_evt->header.evt_id) {\n    case BLE_GAP_EVT_CONNECTED:\n        NRF_LOG_INFO(\"Connected\");\n        err_code = bsp_indication_set(BSP_INDICATE_CONNECTED);\n        APP_ERROR_CHECK(err_code);\n        m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;\n        break;\n\n    case BLE_GAP_EVT_DISCONNECTED:\n        NRF_LOG_INFO(\"Disconnected\");\n        // LED indication will be changed when advertising starts.\n        m_conn_handle = BLE_CONN_HANDLE_INVALID;\n        break;\n\n#ifndef S140\n    case BLE_GAP_EVT_PHY_UPDATE_REQUEST: {\n        NRF_LOG_DEBUG(\"PHY update request.\");\n        ble_gap_phys_t const phys = {\n            .rx_phys = BLE_GAP_PHY_AUTO, .tx_phys = BLE_GAP_PHY_AUTO,\n        };\n        err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);\n        APP_ERROR_CHECK(err_code);\n    } break;\n#endif\n\n    case BLE_GAP_EVT_SEC_PARAMS_REQUEST:\n        // Pairing not supported\n        err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);\n        APP_ERROR_CHECK(err_code);\n        break;\n#if !defined(S112)\n//         case BLE_GAP_EVT_DATA_LENGTH_UPDATE_REQUEST:\n//        {\n//            ble_gap_data_length_params_t dl_params;\n//\n//            // Clearing the struct will effectivly set members to @ref BLE_GAP_DATA_LENGTH_AUTO\n//            memset(&dl_params, 0, sizeof(ble_gap_data_length_params_t));\n//            err_code = sd_ble_gap_data_length_update(p_ble_evt->evt.gap_evt.conn_handle, &dl_params, NULL);\n//            APP_ERROR_CHECK(err_code);\n//        } break;\n#endif //! defined (S112)\n    case BLE_GATTS_EVT_SYS_ATTR_MISSING:\n        // No system attributes have been stored.\n        err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);\n        APP_ERROR_CHECK(err_code);\n        break;\n\n    case BLE_GATTC_EVT_TIMEOUT:\n        // Disconnect on GATT Client timeout event.\n        err_code =\n            sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);\n        APP_ERROR_CHECK(err_code);\n        break;\n\n    case BLE_GATTS_EVT_TIMEOUT:\n        // Disconnect on GATT Server timeout event.\n        err_code =\n            sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);\n        APP_ERROR_CHECK(err_code);\n        break;\n\n    case BLE_EVT_USER_MEM_REQUEST:\n        err_code = sd_ble_user_mem_reply(p_ble_evt->evt.gattc_evt.conn_handle, NULL);\n        APP_ERROR_CHECK(err_code);\n        break;\n\n    case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST: {\n        ble_gatts_evt_rw_authorize_request_t req;\n        ble_gatts_rw_authorize_reply_params_t auth_reply;\n\n        req = p_ble_evt->evt.gatts_evt.params.authorize_request;\n\n        if (req.type != BLE_GATTS_AUTHORIZE_TYPE_INVALID) {\n            if ((req.request.write.op == BLE_GATTS_OP_PREP_WRITE_REQ) ||\n                (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_NOW) ||\n                (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL)) {\n                if (req.type == BLE_GATTS_AUTHORIZE_TYPE_WRITE) {\n                    auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_WRITE;\n                } else {\n                    auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_READ;\n                }\n                auth_reply.params.write.gatt_status = APP_FEATURE_NOT_SUPPORTED;\n                err_code = sd_ble_gatts_rw_authorize_reply(p_ble_evt->evt.gatts_evt.conn_handle, &auth_reply);\n                APP_ERROR_CHECK(err_code);\n            }\n        }\n    } break; // BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST\n\n    default:\n        // No implementation needed.\n        break;\n    }\n}\n\n/**@brief Function for the SoftDevice initialization.\n *\n * @details This function initializes the SoftDevice and the BLE event interrupt.\n */\nstatic void ble_stack_init(void)\n{\n    ret_code_t err_code;\n\n    err_code = nrf_sdh_enable_request();\n    APP_ERROR_CHECK(err_code);\n\n    // Configure the BLE stack using the default settings.\n    // Fetch the start address of the application RAM.\n    uint32_t ram_start = 0;\n    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);\n    APP_ERROR_CHECK(err_code);\n\n    // Enable BLE stack.\n    err_code = nrf_sdh_ble_enable(&ram_start);\n    APP_ERROR_CHECK(err_code);\n\n    // Register a handler for BLE events.\n    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);\n}\n\n/**@brief Function for handling events from the GATT library. */\nvoid gatt_evt_handler(nrf_ble_gatt_t* p_gatt, nrf_ble_gatt_evt_t const* p_evt)\n{\n    if ((m_conn_handle == p_evt->conn_handle) && (p_evt->evt_id == NRF_BLE_GATT_EVT_ATT_MTU_UPDATED)) {\n        m_ble_nus_max_data_len = p_evt->params.att_mtu_effective - OPCODE_LENGTH - HANDLE_LENGTH;\n        NRF_LOG_INFO(\"Data len is set to 0x%X(%d)\", m_ble_nus_max_data_len, m_ble_nus_max_data_len);\n    }\n    NRF_LOG_DEBUG(\"ATT MTU exchange completed. central 0x%x peripheral 0x%x\", p_gatt->att_mtu_desired_central,\n                  p_gatt->att_mtu_desired_periph);\n}\n\n/**@brief Function for initializing the GATT library. */\nvoid gatt_init(void)\n{\n    ret_code_t err_code;\n\n    err_code = nrf_ble_gatt_init(&m_gatt, gatt_evt_handler);\n    APP_ERROR_CHECK(err_code);\n\n    // err_code = nrf_ble_gatt_att_mtu_periph_set(&m_gatt, 64);\n    err_code = nrf_ble_gatt_att_mtu_periph_set(&m_gatt, BLE_GATT_ATT_MTU_DEFAULT);\n    APP_ERROR_CHECK(err_code);\n}\n\n/**@brief Function for handling events from the BSP module.\n *\n * @param[in]   event   Event generated by button press.\n */\nvoid bsp_event_handler(bsp_event_t event)\n{\n    uint32_t err_code;\n    switch (event) {\n    case BSP_EVENT_SLEEP:\n        sleep_mode_enter();\n        break;\n\n    case BSP_EVENT_DISCONNECT:\n        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);\n        if (err_code != NRF_ERROR_INVALID_STATE) {\n            APP_ERROR_CHECK(err_code);\n        }\n        break;\n\n    case BSP_EVENT_WHITELIST_OFF:\n        if (m_conn_handle == BLE_CONN_HANDLE_INVALID) {\n            err_code = ble_advertising_restart_without_whitelist(&m_advertising);\n            if (err_code != NRF_ERROR_INVALID_STATE) {\n                APP_ERROR_CHECK(err_code);\n            }\n        }\n        break;\n\n    default:\n        break;\n    }\n}\n\n/**@brief   Function for handling app_uart events.\n *\n * @details This function will receive a single character from the app_uart module and append it to\n *          a string. The string will be be sent over BLE when the last character received was a\n *          'new line' '\\n' (hex 0x0A) or if the string has reached the maximum data length.\n */\n/**@snippet [Handling the data received over UART] */\nvoid uart_event_handle(app_uart_evt_t* p_event)\n{\n    static uint8_t data_array[BLE_NUS_MAX_DATA_LEN];\n    static uint8_t index = 0;\n    uint32_t err_code;\n\n    switch (p_event->evt_type) {\n    case APP_UART_DATA_READY:\n        UNUSED_VARIABLE(app_uart_get(&data_array[index]));\n        index++;\n\n        if ((data_array[index - 1] == '\\n') || (index >= (m_ble_nus_max_data_len))) {\n            NRF_LOG_DEBUG(\"Ready to send data over BLE NUS\");\n            NRF_LOG_HEXDUMP_DEBUG(data_array, index);\n\n            do {\n                uint16_t length = (uint16_t)index;\n                err_code = ble_nus_string_send(&m_nus, data_array, &length);\n                if ((err_code != NRF_ERROR_INVALID_STATE) && (err_code != NRF_ERROR_BUSY)) {\n                    APP_ERROR_CHECK(err_code);\n                }\n            } while (err_code == NRF_ERROR_BUSY);\n\n            index = 0;\n        }\n        break;\n\n    case APP_UART_COMMUNICATION_ERROR:\n        APP_ERROR_HANDLER(p_event->data.error_communication);\n        break;\n\n    case APP_UART_FIFO_ERROR:\n        APP_ERROR_HANDLER(p_event->data.error_code);\n        break;\n\n    default:\n        break;\n    }\n}\n/**@snippet [Handling the data received over UART] */\n\n/**@brief  Function for initializing the UART module.\n */\n/**@snippet [UART Initialization] */\n// static void uart_init(void)\n//{\n//    uint32_t                     err_code;\n//    app_uart_comm_params_t const comm_params =\n//    {\n//        .rx_pin_no    = RX_PIN_NUMBER,\n//        .tx_pin_no    = TX_PIN_NUMBER,\n//        .rts_pin_no   = RTS_PIN_NUMBER,\n//        .cts_pin_no   = CTS_PIN_NUMBER,\n//        .flow_control = APP_UART_FLOW_CONTROL_DISABLED,\n//        .use_parity   = false,\n//        .baud_rate    = NRF_UART_BAUDRATE_115200\n//    };\n//\n//    APP_UART_FIFO_INIT(&comm_params,\n//                       UART_RX_BUF_SIZE,\n//                       UART_TX_BUF_SIZE,\n//                       uart_event_handle,\n//                       APP_IRQ_PRIORITY_LOWEST,\n//                       err_code);\n//    APP_ERROR_CHECK(err_code);\n//}\n/**@snippet [UART Initialization] */\n\n/**@brief Function for initializing the Advertising functionality.\n */\nstatic void advertising_init(void)\n{\n    uint32_t err_code;\n    ble_advertising_init_t init;\n\n    memset(&init, 0, sizeof(init));\n\n    init.advdata.name_type = BLE_ADVDATA_FULL_NAME;\n    init.advdata.include_appearance = false;\n    init.advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;\n\n    init.srdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);\n    init.srdata.uuids_complete.p_uuids = m_adv_uuids;\n\n    init.config.ble_adv_fast_enabled = true;\n    init.config.ble_adv_fast_interval = APP_ADV_INTERVAL;\n    init.config.ble_adv_fast_timeout = APP_ADV_TIMEOUT_IN_SECONDS;\n\n    init.evt_handler = on_adv_evt;\n\n    err_code = ble_advertising_init(&m_advertising, &init);\n    APP_ERROR_CHECK(err_code);\n\n    ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);\n    b\n}\n\n/**@brief Function for initializing buttons and leds.\n *\n * @param[out] p_erase_bonds  Will be true if the clear bonding button was pressed to wake the application up.\n */\n// static void buttons_leds_init(bool * p_erase_bonds)\n//{\n//    bsp_event_t startup_event;\n//\n//    uint32_t err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS, bsp_event_handler);\n//    APP_ERROR_CHECK(err_code);\n//\n//    err_code = bsp_btn_ble_init(NULL, &startup_event);\n//    APP_ERROR_CHECK(err_code);\n//\n//    *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);\n//}\n\n/**@brief Function for initializing the nrf log module.\n */\nstatic void log_init(void)\n{\n    ret_code_t err_code = NRF_LOG_INIT(NULL);\n    APP_ERROR_CHECK(err_code);\n\n    NRF_LOG_DEFAULT_BACKENDS_INIT();\n}\n\n/**@brief Function for placing the application in low power state while waiting for events.\n */\n/*static void power_manage(void)\n{\n    uint32_t err_code = sd_app_evt_wait();\n    APP_ERROR_CHECK(err_code);\n}*/\n\n/**\n * @brief      { function_description }\n *\n * @param[in]  OnOff  On off\n */\nstatic void PowerSystem(uint8_t OnOff)\n{\n\n    if (OnOff == true) {\n        nrf_gpio_cfg_output(28);\n        nrf_gpio_pin_write(28, 1);\n    } else if (OnOff == false)  {\n        nrf_gpio_cfg_output(28);\n        nrf_gpio_pin_write(28, 0);\n    }\n\n}\n\n/**\n * @brief      { main funciton, set GPIO, init BT stack, SystTick, for ever loop }\n *\n * @return     { none }\n * @par \n */\nint main(void)\n{\n    uint32_t err_code;\n    uint8_t tmp;\n    // bool     erase_bonds;\n\n    // debug\n    PowerSystem(true);\n    Adafruit_NeoPixel_Init(3, 25, NEO_GRB + NEO_KHZ800);\n    Adafruit_NeoPixel_Begin();\n    Adafruit_NeoPixel_setPixelColor(0, 255, 0, 0); // Moderately bright green color.\n    Adafruit_NeoPixel_setPixelColor(1, 0, 255, 0); // Moderately bright green color.\n    Adafruit_NeoPixel_setPixelColor(2, 0, 0, 255); // Moderately bright green color.\n    Adafruit_NeoPixel_Show();\n\n    // debug\n\n    // Initialize.\n    err_code = app_timer_init();\n    APP_ERROR_CHECK(err_code);\n\n    // uart_init();\n    log_init();\n\n    // buttons_leds_init(&erase_bonds);\n    ble_stack_init();\n    gap_params_init();\n    gatt_init();\n    services_init();\n    advertising_init();\n    conn_params_init();\n\n    // printf(\"\\r\\nUART Start!\\r\\n\");\n    NRF_LOG_INFO(\"UART Start!\");\n    err_code = ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST);\n    APP_ERROR_CHECK(err_code);\n\n    // Enter main loop.\n    for (;;) {\n        //UNUSED_RETURN_VALUE(NRF_LOG_PROCESS());\n        //power_manage();\n        tmp = Flash();\n        if (tmp != 0)\n            nrf_delay_ms(Ring());\n    }\n}\n\n/**\n * @}\n */\n",
			"file": "main.c",
			"file_size": 25552,
			"file_write_time": 131624029070231578,
			"settings":
			{
				"buffer_size": 24707,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/components/ble/ble_services/ble_nus/ble_nus.h",
			"settings":
			{
				"buffer_size": 9234,
				"line_ending": "Windows"
			}
		},
		{
			"file": "BlueLightMusic.sublime-project",
			"settings":
			{
				"buffer_size": 2071,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Adafruit_NeoPixel.c",
			"settings":
			{
				"buffer_size": 21868,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "LedPatterns.c",
			"settings":
			{
				"buffer_size": 12033,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"All"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"All"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"All"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Debug"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Flash App"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Flash_softdevice"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"All"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 132.0,
		"last_filter": "Package Control: in",
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"packagere",
				"PackageResourceViewer: Open Resource"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 629.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/dani/workspace/nrf5x/TEST",
		"/home/dani/workspace/nrf5x/TEST/pca10040",
		"/home/dani/workspace/nrf5x/TEST/pca10040/s132",
		"/home/dani/workspace/nrf5x/TEST/pca10040/s132/armgcc"
	],
	"file_history":
	[
		"/home/dani/workspace/nrf5x/TEST/Makefile",
		"/home/dani/.config/sublime-text-3/Packages/DoxyDoc/DoxyDoc.sublime-settings",
		"/home/dani/.config/sublime-text-3/Packages/User/DoxyDoc.sublime-settings",
		"/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/components/ble/nrf_ble_gatt/nrf_ble_gatt.h",
		"/home/dani/workspace/nrf5x/TEST/BlueLightMusic.sublime-project",
		"/home/dani/.config/sublime-text-3/Packages/Alignment/Default (Linux).sublime-keymap",
		"/home/dani/.cache/.fr-7TVNXx/nrf5x/TEST/main.c",
		"/home/dani/workspace/nrf5x/TEST/Adafruit_NeoPixel.h",
		"/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/components/device/nrf51422_peripherals.h",
		"/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/config/sdk_config.h",
		"/home/dani/workspace/nrf5x/TEST/project.h",
		"/home/dani/workspace/nrf5x/TEST/LedPatterns.c",
		"/home/dani/workspace/nrf5x/TEST/Adafruit_NeoPixel.c",
		"/home/dani/.config/sublime-text-3/Packages/SublimeAStyleFormatter/SublimeAStyleFormatter.sublime-settings",
		"/home/dani/.config/sublime-text-3/Packages/User/SublimeAStyleFormatter.sublime-settings",
		"/home/dani/workspace/nrf5x/TEST/SongPatterns.h",
		"/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/examples/ble_peripheral/ble_app_uart/main.c",
		"/home/dani/workspace/nrf5x/TEST/Tone.cpp",
		"/home/dani/.config/sublime-text-3/Packages/DocBlockr/README.md",
		"/home/dani/workspace/nrf5x/TEST/WS2812FX.c",
		"/home/dani/workspace/nrf5x/TEST/WS2812FX.h",
		"/home/dani/.config/sublime-text-3/Packages/SublimeAStyleFormatter/Default (Linux).sublime-keymap",
		"/home/dani/workspace/nrf5x/TEST/pca10040/s132/armgcc/Makefile",
		"/home/dani/.config/sublime-text-3/Packages/Makefile/Make.sublime-build",
		"/home/dani/workspace/nrf5x/TEST/.tags",
		"/home/dani/workspace/nrf5x/TEST/WS2812FX.cpp",
		"/home/dani/workspace/nrf5x/TEST/.geanyprj"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"doShow",
			"::",
			"numBytes"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"_"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24707,
						"regions":
						{
						},
						"selection":
						[
							[
								23505,
								23505
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8772.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/dani/workspace/nrf5x/nRF5_SDK_14.2.0_17b948a/components/ble/ble_services/ble_nus/ble_nus.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9234,
						"regions":
						{
						},
						"selection":
						[
							[
								3436,
								3436
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": 40,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 769.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "BlueLightMusic.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2071,
						"regions":
						{
						},
						"selection":
						[
							[
								1321,
								1321
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										1782,
										1783
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										0,
										1
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1321,
										1322
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										1242,
										1243
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/JavaScript/JSON.sublime-syntax"
						},
						"translation.x": 20.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Adafruit_NeoPixel.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21868,
						"regions":
						{
						},
						"selection":
						[
							[
								1603,
								1603
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
									"1":
									[
										21683,
										21684
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										21076,
										21077
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 139.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "LedPatterns.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12033,
						"regions":
						{
						},
						"selection":
						[
							[
								513,
								513
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.clone": -1,
							"bracket_highlighter.clone_locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.clone_regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content"
							],
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 151.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Makefile/Make.sublime-build",
	"project": "BlueLightMusic.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 210.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
